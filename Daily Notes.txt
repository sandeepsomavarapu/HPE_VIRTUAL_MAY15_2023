


JAVA IS ONE OOPL


OOPS:
		1)INHERITANCE
		2)POLYMORPHISAM				-->oopl--->java,c++,python,.net....
		3)ENCAPSULATION
		4)ABSTRACTION


JAVA -->20		:James Gosling


		sun micro system	--1996 -->oracle corporation



Execution FLow :
=================
	
		.py
		.java,.html......


53 

11 
'
JDK--->JRE--->JVM


translation:

Compailation:Compailer		javac filename.java

	


	user language-->machine language
	
	.java-->class
	
	source --->byte code 


.class --->JVM   java classname 


Identifiers:
===========
any name in java will call it as identifier  


		a-z
		A-Z
		0-9
		_
		$

	age123
	123age 




variables:
==========
		sandeep trainer 92346237947239


syntax:
	
		datatype varname=value;
		
PDT  		NPDT

			String,array,...


numeric data:age,salary,contact,aadhar,accno.....

byte  	 1 byte     -128 to 127
short	 2 bytes	-32768 to 32767
int		 4 bytes 	-2147483648 to 2147483647
long	 8 bytes	-2 power 63  to (2 power 63)- 1				long aadhar			byte age  =32;

decimal

float 	 4 bytes				float salary=23.543832792379012f;
double	 8 bytes				double calci=34.234001929001211;

char	 2 bytes		'M'
boolean	 1 bit		true-1,false-0



	variables:
	
			1)local			inside the  method 
			2)global		outside the method and with in the class
			
					instance / static


	syntax:
	=======
	static int countryCode=91;  //4
			int emid=123;		//4
	
	memory:
	=======
	static properties will get memory space only once at the time of class loading into JVM
	instance properties will get memory space for every object creation 
						class A
						
						classname objname=new classname()
	
	Access:
	=======
			static properties can be accessed by using classname 
			instance properties can be accessed by using  objref
	
	Usage:
	=======
			for common data like countryCode,clg name,schoolname....will use static
			for unique data like accno,aadhar no,contact no....will use instance
	

Platform Independent:
=====================
		oracle 							microsoft			

		java(WORA)								.net


	trainer machine windows11
		java app
			.class

machine1   machine2   machine n
linux		 windows	ubuntu



ArithematicException---->JVM-->throw ...

a>b
a==b
a/b

throw new ArithematicException("")


user defined exception classes 


class InvalidCredentials extends Exception/RuntimeException/Throwable 

{
InvalidCredentials(String message)
{

super(message)

}


}


save the data 
				java app-->files--->write,read...			

databases


		Streams--->flow of data 
		
		
		
		java.io package    File
		
		1)character stream :PrintWriter,BufferedReader
		2)byte stream	   :FileOutputStream,FileInputStream
		3)data stream	   :DataInputStream,DataOutputStream
		4)buffered stream  :BufferedOutputStream,BufferedInputStream
		5)object stream    :ObjectOutputStream,ObjectInputStream
		
		
		Serialization and deserilaization
		
		
Multi Threading:
================

Multi Tasking:
=============		
executing several tasks simultaniously 

		1)Process based multi tasking
			executing several tasks simultaniously where each task is seprate indipendent process
				
					ex:teams,notepad,eclipse......
					
		2)thread based multi tasking 
		
			executing several tasks simultaniously where each task belongs to same process
					
		
		
		Process :group of threads
		thread  : a smallest unit of process
		
		
		
		class Test
		{
		
			segment-1		2 hours
			
			
			
			segment-2
			
			
			
			segment-3
		
		
		
			segment-n
		
		
		
		
		}
		
		Two ways to create thread 
		
		1)implements Runnable
		
		2)extends Thread
		
		
		
		Functional Interface--->SAM		Runnable	
		Marker Interface---->0 methods	Serializable
			interface --->1-n


synchronization:
================

synchronized
				synchronized,	not synchronized

	immutable			muttable
	String		,StringBuffer,StringBuilder-->java.lang-->group of  chars 

					ArrayList,Vector
					Hashmap ,HashTable...
public void m1()
{

	..reading....   no thread safety

}
							t1,t2,t3,t4......

public synchronized void m2()
{
...t1 -2000
					thready safety

}

https://www.javamadesoeasy.com/2015/03/thread-states-thread-life-cycle-in-java.html


InterThread Communication:
=========== ==============
wait,notify,notifyAll
	sleep-->Thread
	wait--->java.lang.Object



			1-100
	even thread-->even numbers
	odd thread -->odd numbers
		
1,2,3,4,5,6,7....100	


			even-->wait --2

			odd-->1-->wait(),notify




1,2,3,4,5,6,7----->100


Limitations:

	developer need to create threads
	
	Runnable
	Thread
	Callable 
	
	
	void run() throws  unchekced 
	{
	
	
	}
	
	ExecutorService
	
	ThreadPool-->collections of threads 
	
	
	COLLECTIONS:
	===========
	
		int marks=300;
			marks=350;
	
	
	Arrays:
	=======
		group of values
		
		int arr[]={12,23,34,534,634,55};
		
		index -  0,1,2,3,4,5,6,7,8
	
	arr[6]-->AIO
	Limitations Arrays:
	==================
	1)arrays are fixed in size  -->AIO
	
	2)arrays can hold only homogeneous data 
	
	3)no utility methods 
	
	
	
	Advantages With COLLECTIONS:
	============================
	
	1)collections are not fixed in size 
	
	2)collections can hold both homogeneous  and heterogeneous data 
	
	3)lots of utility methods 
	


List:

	1)duplicates are allowed 
	2)insertion order is preserved 
	
	
	
	Map interface not child to Collection
	
	key,value-->pair -->Entry
	
	key can be any DT		key must be uniqe
	value can be any DT		value can be duplicate
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	


